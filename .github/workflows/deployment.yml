name: Run Collibra Adaptor Sandbox deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
jobs:
  run-open-rag-pull-request-check:
    runs-on: ubuntu-latest
    environment: main
    container:
      image: adgonrodr/github-actions-terraform-python:latest
    env:
      MODEL_TYPE: ${{ vars.MODEL_TYPE }}
      LLM_MODEL: ${{ vars.LLM_MODEL }}
      EMBEDDING_MODEL: ${{ vars.EMBEDDING_MODEL }}
      RETRIEVER_NAME: ${{ vars.RETRIEVER_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ASTRA_DB_API_ENDPOINT: ${{ secrets.ASTRA_DB_API_ENDPOINT }}
      ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_DB_APPLICATION_TOKEN }}
      ASTRA_DB_KEYSPACE: ${{ vars.ASTRA_DB_KEYSPACE }}
      ASTRA_DB_COLLECTION: ${{ vars.ASTRA_DB_COLLECTION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.0
          echo "/github/home/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry and Install Dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Test Open RAG
        run: |
          bash scripts/build_and_test.sh
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Package Source Code
        run: zip -r release_${{ github.sha }}.zip .
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_${{ github.sha }}.zip
          asset_name: release_${{ github.sha }}.zip
          asset_content_type: application/zip
